#!/usr/bin/python3
#
#

import os
import argparse
import time
import serial
import struct
import sys
from enum import Enum

SERIAL_DEV='/dev/ttyUSB0'
BAUD_RATE=9600
BYTES_PER_LINE=16

BLOCK_SIZE=512
EEPROM_SIZE=32768

def print_data(data,offset=0):

    header=" addr |"+"".join([" {:2d}".format(i) for i in range(BYTES_PER_LINE)])
    print(header)
    print(' '+'-'*(len(header)-1))

    lineoffset=offset % BYTES_PER_LINE
    base=offset-lineoffset
    n_bytes_left = len(data)
    dataptr=0

    while n_bytes_left > 0:
        chunk_size = min(n_bytes_left,BYTES_PER_LINE-lineoffset)
        chunk = data[dataptr:(dataptr+chunk_size)]
        elems=lineoffset*["   "]+[" {:02x}".format(b) for b in chunk]
        print(" {:04x} |".format(base)+"".join(elems))

        base += BYTES_PER_LINE
        dataptr += chunk_size
        n_bytes_left -= chunk_size
        lineoffset = 0 # only first time is relevant

class Command(Enum):
    READ=1
    WRITE=2
    CLEAR=3
    HANDSHAKE=4

class Response(Enum):
    ACK=10
    ERROR=20

class SerialComm:
    def __init__(self,ser):
        self._ser = ser

    def write_u8(self,v):
        b = struct.pack('<B', v)
        self._ser.write(b)

    def read_u8(self):
        b = self._ser.read(1)
        return struct.unpack('<B', b)[0]

    def write_u16(self,v):
        bs = struct.pack('<H', v)
        self._ser.write(bs)

    def read_u16(self):
        bs = self._ser.read(2)
        return struct.unpack('<H', bs)[0]

    def write_u32(self,v):
        bs = struct.pack('<I', v)
        self._ser.write(bs)

    def read_u32(self):
        bs = self._ser.read(4)
        return struct.unpack('<I', bs)[0]

    def write_cmd(self,cmd):
        self.write_u8(cmd.value)

    def read_cmd(self):
        return Command(self.read_u8())

    def check_ack(self):
        b = self.read_u8()
        resp = Response(b)
        if resp != Response.ACK:
            raise Exception('Bad response')

    def write_ack(self):
        resp = Response.ACK
        self.write_u8(resp.value)

    def process_handshake(self):
        key = 0x12345678;
        ref = (~key) & 0xffffffff;
        self.write_cmd(Command.HANDSHAKE)
        self.write_u32(key)
        self.check_ack()
        ans = self.read_u32()
        if ans != ref:
            raise Exception("Failed performing handshake, mismatching data (sent {:08x}, expected {:08x}, got {:08x})".format(key,ref,ans))
        self.write_ack()
        self.check_ack()

    def process_read(self, offset, nbytes):
        self.write_cmd(Command.READ)
        self.write_u16(offset)
        self.write_u16(nbytes)
        self.check_ack()
        data = self._ser.read(nbytes)
        self.write_ack()
        self.check_ack()
        return data

    def process_clear(self):
        self.write_cmd(Command.CLEAR)
        self.check_ack()

    def process_write(self, offset, nbytes, data):
        self.write_cmd(Command.WRITE)
        self.write_u16(offset)
        self.write_u16(nbytes)
        self.check_ack()
        self._ser.write(data)
        self.check_ack()

def print_usage():
    print("Usage: {} <CMD>".format(sys.argv[0]))
    print()
    print("List of valid commands:")
    print("    read [-fmt] <offset> <nbytes>")
    print("        Read <nbytes> bytes, starting from address <offset>.")
    print("        The output is written to STDOUT. If the flag -fmt is given,")
    print("        data is printed in a formatted table.")
    print()
    print("    write <offset> <nbytes> [<filename>]")
    print("        Write <nbytes> bytes, starting at address <offset>.")
    print("        Data is read from the file <filename>, or, if <filename>")
    print("        is absent, is data read from STDIN.")
    print()
    print("    clear")
    print("        Clears the entire EEPROM with 0xff bytes.")

def bail(msg):
    print(msg)
    print()
    print_usage()
    sys.exit(1)

def parse_size_args(args):
    try:
        offset = int(args[0])
    except:
        bail("Invalid argument given, expected positive integer <offset>")

    if offset < 0:
        bail("<offset> cannot be negative")

    try:
        nbytes = int(args[1])
    except:
        bail("Invalid argument given, expected positive integer <nbytes>")

    if not nbytes > 0:
        bail("<nbytes> must be greater than 0")

    return offset,nbytes

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Generic EEPROM Programmer')

    parser.add_argument('-e','--eeprom', help='Specify model of EEPROM.',choices=['at28c256', 'at28c16'], default='at28c256')
    subparsers = parser.add_subparsers(dest='command',required=True,metavar='command')

    read_p = subparsers.add_parser("read", help="read data from EEPROM")
    read_p.add_argument('-o', '--output', help='name of file to write output to (- for stdout)',default='-')
    read_p.add_argument('-b', '--base',   help='byte offset to read from', type=int, default=0)
    read_p.add_argument('-n', '--nbytes', help='number of bytes to read', type=int, default=1)
    read_p.add_argument('-t', '--table',  help='format output into readable table', action='store_true')

    write_p = subparsers.add_parser("write",help="write data to EEPROM")
    write_p.add_argument('-i', '--input',  help='name of binary file to read (- for stdin)',required=True)
    write_p.add_argument('-b','--base',    help='byte offset to write to', type=int, default=0)

    args = parser.parse_args()

    print('EEPROM programmer')
    print('Set up for EEPROM model:',args.eeprom)

    if args.command == 'read':

        format_table=args.table

        offset = args.base
        nbytes = args.nbytes

        with serial.Serial(SERIAL_DEV,BAUD_RATE) as ser:
            comm = SerialComm(ser)
            comm.process_handshake()

            n_bytes_left = nbytes
            data_ptr=0
            data = []
            while n_bytes_left > 0:
                bksize = min(BLOCK_SIZE,n_bytes_left)
                print("Reading bytes {} - {}...".format(offset+data_ptr, offset+data_ptr+bksize-1))
                block = comm.process_read(offset+data_ptr,bksize)
                data += block
                n_bytes_left -= bksize
                data_ptr += bksize

            data = bytes(data)

            if format_table:
                print_data(data,offset)
            else:
                print(data)
                sys.stdout.buffer.write(data)
            print("Done!")

    elif args.command == 'write':

        offset = args.base

        if args.input == '-':
            data = sys.stdin.buffer.read()
        else:
            filename = args.input
            if not os.path.exists(filename) or not os.path.isfile(filename):
                bail("{} is not a valid file".format(filename))

            with open(filename, "rb") as fp:
                data = fp.read()
                # if len(data) != nbytes:
                #     bail("Size of file '{}' is incompatible with nbytes={} given".format(len(data),nbytes))

        nbytes = len(data)
        print('Writing {} bytes of data'.format(nbytes))

        with serial.Serial(SERIAL_DEV,BAUD_RATE) as ser:
            comm = SerialComm(ser)
            comm.process_handshake()

            n_bytes_left = nbytes
            data_ptr=0
            while n_bytes_left > 0:
                bksize = min(BLOCK_SIZE,n_bytes_left)
                print("Writing bytes {} - {}...".format(offset+data_ptr, offset+data_ptr+bksize-1))
                block = data[data_ptr:(data_ptr+bksize)]
                comm.process_write(offset+data_ptr, bksize, block)
                n_bytes_left -= bksize
                data_ptr += bksize
            print("Done!")

    elif args.command == 'clear':
        with serial.Serial(SERIAL_DEV,BAUD_RATE) as ser:
            comm = SerialComm(ser)
            comm.process_handshake()

            n_bytes_left = EEPROM_SIZE
            data_ptr=0
            while n_bytes_left > 0:
                bksize = min(BLOCK_SIZE,n_bytes_left)
                print("Clearing bytes {} - {}...".format(data_ptr, data_ptr+bksize-1))
                block = bksize*b'\xff'
                comm.process_write(data_ptr, bksize, block)
                n_bytes_left -= bksize
                data_ptr += bksize
            print("Done!")

    # elif sys.argv[1] == "handshake":
    #     with serial.Serial(SERIAL_DEV,BAUD_RATE) as ser:
    #         comm = SerialComm(ser)
    #         comm.process_handshake()
    else:
        bail("Invalid command '{}' given.".format(args.command))

    sys.exit(0)
