#!/usr/bin/python3
#
#

import argparse
import time
from pathlib import Path
import serial
import struct
import io
import intelhex
import sys
from enum import Enum

BAUD_RATE=9600
BYTES_PER_LINE=16

BLOCK_SIZE=512
EEPROM_SIZE=32768

def format_table(data,offset=0):

    output=[]
    header=" addr |"+"".join([f" {i:2d}" for i in range(BYTES_PER_LINE)])
    output.append(header)
    output.append(' '+'-'*(len(header)-1))

    lineoffset=offset % BYTES_PER_LINE
    base=offset-lineoffset
    n_bytes_left = len(data)
    dataptr=0

    while n_bytes_left > 0:
        chunk_size = min(n_bytes_left,BYTES_PER_LINE-lineoffset)
        chunk = data[dataptr:(dataptr+chunk_size)]
        elems=lineoffset*["   "]+[f" {b:02x}" for b in chunk]
        output.append(f" {base:04x} |" + "".join(elems))

        base += BYTES_PER_LINE
        dataptr += chunk_size
        n_bytes_left -= chunk_size
        lineoffset = 0 # only first time is relevant

    return output

class Command(Enum):
    READ=1
    WRITE=2
    CLEAR=3
    HANDSHAKE=4

class Response(Enum):
    ACK=10
    ERROR=20

class SerialComm:
    def __init__(self,ser):
        self._ser = ser

    def write_u8(self,v):
        b = struct.pack('<B', v)
        self._ser.write(b)

    def read_u8(self):
        b = self._ser.read(1)
        return struct.unpack('<B', b)[0]

    def write_u16(self,v):
        bs = struct.pack('<H', v)
        self._ser.write(bs)

    def read_u16(self):
        bs = self._ser.read(2)
        return struct.unpack('<H', bs)[0]

    def write_u32(self,v):
        bs = struct.pack('<I', v)
        self._ser.write(bs)

    def read_u32(self):
        bs = self._ser.read(4)
        return struct.unpack('<I', bs)[0]

    def write_cmd(self,cmd):
        self.write_u8(cmd.value)

    def read_cmd(self):
        return Command(self.read_u8())

    def check_ack(self):
        b = self.read_u8()
        resp = Response(b)
        if resp != Response.ACK:
            raise Exception('Bad response')

    def write_ack(self):
        resp = Response.ACK
        self.write_u8(resp.value)

    def process_handshake(self):
        key = 0x12345678;
        ref = (~key) & 0xffffffff;
        self.write_cmd(Command.HANDSHAKE)
        self.write_u32(key)
        self.check_ack()
        ans = self.read_u32()
        if ans != ref:
            raise Exception(f"Failed performing handshake, mismatching data (sent {key:08x}, expected {ref:08x}, got {ans:08x})")
        self.write_ack()
        self.check_ack()

    def process_read(self, offset, nbytes):
        self.write_cmd(Command.READ)
        self.write_u16(offset)
        self.write_u16(nbytes)
        self.check_ack()
        data = self._ser.read(nbytes)
        self.write_ack()
        self.check_ack()
        return data

    def process_clear(self):
        self.write_cmd(Command.CLEAR)
        self.check_ack()

    def process_write(self, offset, nbytes, data):
        self.write_cmd(Command.WRITE)
        self.write_u16(offset)
        self.write_u16(nbytes)
        self.check_ack()
        self._ser.write(data)
        self.check_ack()

def print_usage():
    print(f"Usage: {sys.argv[0]} <CMD>")
    print()
    print("List of valid commands:")
    print("    read [-fmt] <offset> <nbytes>")
    print("        Read <nbytes> bytes, starting from address <offset>.")
    print("        The output is written to STDOUT. If the flag -fmt is given,")
    print("        data is printed in a formatted table.")
    print()
    print("    write <offset> <nbytes> [<filename>]")
    print("        Write <nbytes> bytes, starting at address <offset>.")
    print("        Data is read from the file <filename>, or, if <filename>")
    print("        is absent, is data read from STDIN.")
    print()
    print("    clear")
    print("        Clears the entire EEPROM with 0xff bytes.")

def bail(msg):
    print(msg)
    print()
    print_usage()
    sys.exit(1)

def parse_size_args(args):
    try:
        offset = int(args[0])
    except:
        bail("Invalid argument given, expected positive integer <offset>")

    if offset < 0:
        bail("<offset> cannot be negative")

    try:
        nbytes = int(args[1])
    except:
        bail("Invalid argument given, expected positive integer <nbytes>")

    if not nbytes > 0:
        bail("<nbytes> must be greater than 0")

    return offset,nbytes


def read_data(serial_device, nbytes, offset):
    with serial.Serial(serial_device,BAUD_RATE) as ser:
        comm = SerialComm(ser)
        comm.process_handshake()

        n_bytes_left = nbytes
        data_ptr=0
        data = []
        while n_bytes_left > 0:
            bksize = min(BLOCK_SIZE,n_bytes_left)
            print("Reading bytes 0x{:x} - 0x{:x}...".format(offset+data_ptr, offset+data_ptr+bksize-1))
            block = comm.process_read(offset+data_ptr,bksize)
            data += block
            n_bytes_left -= bksize
            data_ptr += bksize

        return bytes(data)

def write_data(serial_device, data, offset):
    with serial.Serial(serial_device,BAUD_RATE) as ser:
        comm = SerialComm(ser)
        comm.process_handshake()

        n_bytes_left = len(data)
        data_ptr=0
        while n_bytes_left > 0:
            bksize = min(BLOCK_SIZE,n_bytes_left)
            print("Writing bytes 0x{:x} - 0x{:x}...".format(offset+data_ptr, offset+data_ptr+bksize-1))
            block = data[data_ptr:(data_ptr+bksize)]
            comm.process_write(offset+data_ptr, bksize, block)
            n_bytes_left -= bksize
            data_ptr += bksize

def verify_data(serial_device, offset, ref_data):
    data_read = read_data(serial_device, len(ref_data), offset)
    for i in range(len(ref_data)):
        if ref_data[i] != data_read[i]:
            r = data_read[i]
            e = ref_data[i]
            addr = offset + i
            raise RuntimeError(f'Verification failed for data at address {addr:x}. Read {r:x}, expected {e:x}')


def auto_int(x):
    return int(x,0)

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Generic EEPROM Programmer')

    parser.add_argument('-d','--device', help='Specify serial device.', default='/dev/ttyUSB0')
    parser.add_argument('-e','--eeprom', help='Specify model of EEPROM.',choices=['at28c256', 'at28c16'], default='at28c256')
    subparsers = parser.add_subparsers(dest='command',required=True,metavar='command')

    read_p = subparsers.add_parser("read", help="read data from EEPROM")
    read_p.add_argument('-o', '--output', help='name of file to write output to (- for stdout)',default='-')
    read_p.add_argument('-b', '--base',   help='byte offset to read from', type=auto_int, default=0)
    read_p.add_argument('-n', '--nbytes', help='number of bytes to read', type=int, default=1)
    read_p.add_argument('-t', '--table',  help='format output into readable table', action='store_true')

    write_p = subparsers.add_parser("write",help="write data to EEPROM")
    write_p.add_argument('-i', '--input',  help='name of binary file to read (- for stdin)',required=True)
    write_p.add_argument('-f', '--format', help='format of input file (hex or bin)', choices=['hex', 'bin'])
    write_p.add_argument('-b','--base',    help='byte offset to write to', type=auto_int, default=0)
    write_p.add_argument('-v','--verify',  help='verify data written', action='store_true')

    clear_p = subparsers.add_parser("clear", help="clear the entire EEPROM")

    args = parser.parse_args()

    serial_device=args.device

    print('EEPROM programmer')
    print('Connecting to programmer on serial device', serial_device)
    print('Set up for EEPROM model:',args.eeprom)

    if args.command == 'read':
        data = read_data(serial_device, args.nbytes, args.base)

        if args.table:
            lines = format_table(data,args.base)
            bytes_to_write = ('\n'.join(lines)+'\n').encode()
        else:
            bytes_to_write = data

        if args.output == '-':
            sys.stdout.buffer.write(bytes_to_write)
        else:
            out_path = Path(args.output)
            out_path.write_bytes(bytes_to_write)

        print("Done!")

    elif args.command == 'write':

        # binary by default
        fmt = 'bin'

        if args.input == '-':
            data = sys.stdin.buffer.read()
        else:
            input_path = Path(args.input)
            if not input_path.exists() or not input_path.is_file():
                bail(f"{input_path} is not a valid file")

            if input_path.suffix in ['.bin', '.hex']:
                fmt = input_path.suffix[1:]
            data = input_path.read_bytes()

        # --format overrides
        if args.format is not None:
            fmt = args.format

        if fmt == 'bin':
            print(f'Writing {len(data)} bytes of data at address 0x{args.base:x}')
            write_data(serial_device, data, args.base)
            print("Done!")

            if args.verify:
                print('Verifying written data...')
                verify_data(serial_device, args.base, data)
                print('All good!')
        else: # 'hex'

            ih = intelhex.IntelHex()
            sio = io.StringIO(data.decode())
            ih.loadhex(sio)
            sio.close()

            for segm_base,segm_end in ih.segments():
                segm_data = ih[segm_base:segm_end].tobinstr()

                print(f'Writing segment of {len(segm_data)} bytes of data at address 0x{segm_base:x}')
                write_data(serial_device, segm_data, segm_base)
            print("Done!")

            if args.verify:
                print('Verifying written data...')
                for segm_base,segm_end in ih.segments():
                    segm_data = ih[segm_base:segm_end].tobinstr()
                    verify_data(serial_device, segm_base, segm_data)
                print('All good!')

    elif args.command == 'clear':
        with serial.Serial(serial_device,BAUD_RATE) as ser:
            comm = SerialComm(ser)
            comm.process_handshake()

            n_bytes_left = EEPROM_SIZE
            data_ptr=0
            while n_bytes_left > 0:
                bksize = min(BLOCK_SIZE,n_bytes_left)
                print("Clearing bytes {} - {}...".format(data_ptr, data_ptr+bksize-1))
                block = bksize*b'\xff'
                comm.process_write(data_ptr, bksize, block)
                n_bytes_left -= bksize
                data_ptr += bksize
            print("Done!")

    # elif sys.argv[1] == "handshake":
    #     with serial.Serial(serial_device,BAUD_RATE) as ser:
    #         comm = SerialComm(ser)
    #         comm.process_handshake()
    else:
        bail(f"Invalid command '{args.command}' given.")

    sys.exit(0)
